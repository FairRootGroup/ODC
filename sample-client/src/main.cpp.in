// Copyright 2019 GSI, Inc. All rights reserved.
//
//

#include "DDSControlClient.h"

// BOOST
#include <boost/program_options/options_description.hpp>
#include <boost/program_options/parsers.hpp>
#include <boost/program_options/variables_map.hpp>
#include <boost/algorithm/string/trim.hpp>

#include <map>
#include <vector>

#ifdef READLINE_AVAIL
#include <cstdio>
#include <cstdlib>
#include <string.h>
#include <readline/readline.h>
#include <readline/history.h>
#endif

using namespace std;
namespace bpo = boost::program_options;

vector<string> commands({ ".quit", ".init", ".config", ".start", ".stop", ".term", ".down" });

map<string, string> helptext({
    {".quit", "Quit the program."},
    {".init", "Initialization request."},
    {".config", "Configure run request."},
    {".start", "Start request."},
    {".stop", "Stop request."},
    {".term", "Terminate request."},
    {".down", "Shutdown request."}
});

void printDescription()
{
    cout << "Sample client for DDS control." << endl
         << "Available commands:" << endl;
    for (const auto& cmd : commands)
    {
        cout << cmd << " - " << helptext[cmd] << endl;
    }
}

#ifdef READLINE_AVAIL
vector<string> matches;

char* command_generator(const char* text, int index)
{
    if (index < matches.size())
    {
        return strdup(matches[index].c_str());
    }
    return nullptr;
}

char** command_completion(const char* text, int start, int)
{
    rl_attempted_completion_over = 1;
    if (start == 0 && !string(text).empty())
    {
        matches.clear();
        for (const auto& cmd : commands)
        {
            if (cmd.find(text) != string::npos)
            {
                matches.push_back(cmd);
            }
        }
        return rl_completion_matches(text, command_generator);
    }
    return nullptr;
}
#endif

int main(int argc, char** argv)
{
    string host;
    string topo;

    // Generic options
    bpo::options_description options("dds-sample-client options");
    options.add_options()("help,h", "Produce help message");
    options.add_options()(
        "host", bpo::value<std::string>(&host)->default_value("localhost:50051"),
        "DDS control connection string (default \"localhost:50051\")");
    string default_topo("@FairMQ_DATADIR@/ex-dds-topology-infinite.xml");
    options.add_options()("topo",
                          bpo::value<std::string>(&topo)->default_value(default_topo),
                          (string("Topology filepath (default ") + default_topo + string(")")).c_str());

    // Parsing command-line
    bpo::variables_map vm;
    bpo::store(bpo::command_line_parser(argc, argv).options(options).run(), vm);
    bpo::notify(vm);

    if (vm.count("help"))
    {
        cout << options;
        return EXIT_SUCCESS;
    }

    if (!vm.count("host"))
    {
        cout << "DDS control server address is not provided" << endl;
        cout << options;
        return EXIT_FAILURE;
    }

    if (!vm.count("topo"))
    {
        cout << "Topology filepath is not provided" << endl;
        cout << options;
        return EXIT_FAILURE;
    }

    DDSControlClient control(grpc::CreateChannel(host, grpc::InsecureChannelCredentials()));
    control.setTopo(topo);

    printDescription();

#ifdef READLINE_AVAIL
    // Register command completion handler
    rl_attempted_completion_function = command_completion;
#endif

    while (true)
    {
        string prompt("Please enter command: ");
        string cmd;

#ifdef READLINE_AVAIL
        char* buf;
        buf = readline(prompt.c_str());
        if (buf != nullptr)
        {
            cmd = string(buf);
            free(buf);
        }
        else
        {
            cout << endl;
            break; // ^D
        }

        if (!cmd.empty())
        {
            add_history(cmd.c_str());
        }
#else
        cout << prompt;
        getline(std::cin, cmd);
#endif
        boost::algorithm::trim_right(cmd);

        string replyString;

        if (cmd.empty())
        {
        }
        else if (cmd == ".quit")
        {
            return EXIT_SUCCESS;
        }
        else if (cmd == ".init")
        {
            cout << "Sending initialization request..." << endl;
            replyString = control.RequestInitialize();
        }
        else if (cmd == ".config")
        {
            cout << "Sending configure run request..." << endl;
            replyString = control.RequestConfigureRun();
        }
        else if (cmd == ".start")
        {
            cout << "Sending start request..." << endl;
            replyString = control.RequestStart();
        }
        else if (cmd == ".stop")
        {
            cout << "Sending stop request..." << endl;
            replyString = control.RequestStop();
        }
        else if (cmd == ".term")
        {
            cout << "Sending terminate request..." << endl;
            replyString = control.RequestTerminate();
        }
        else if (cmd == ".down")
        {
            cout << "Sending shutdown request..." << endl;
            replyString = control.RequestShutdown();
        }
        else
        {
            cout << "Unknown command " << cmd << endl;
        }

        if (!replyString.empty())
        {
            cout << "Reply: " << replyString << endl;
        }
    }

    return EXIT_SUCCESS;
}
